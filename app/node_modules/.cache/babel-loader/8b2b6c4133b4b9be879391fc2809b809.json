{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitrepos\\\\optimizer\\\\app\\\\src\\\\components\\\\Home.jsx\";\nimport * as React from 'react';\nimport '../index.css';\nimport httpClient from '../httpClient';\nimport Spinner from './Spinner';\n\nconst config = require('../config.json');\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      breaks: null\n    };\n    this.ensureDataFetched = this.ensureDataFetched.bind(this);\n    this.refetchData = this.ensureDataFetched.bind(this);\n    this.setLoading = this.setLoading.bind(this);\n  }\n\n  setLoading(isLoading) {\n    this.setState({\n      isLoading\n    });\n  }\n\n  componentDidMount() {\n    this.ensureDataFetched();\n  }\n\n  ensureDataFetched() {\n    this.setLoading(true);\n    const client = new httpClient();\n    return client.get(`${config.aws.api.url}${config.aws.api.path}`, {\n      'x-api-key': config.aws.api.key\n    }).then(response => {\n      if (response.data && response.status === 200) {\n        this.setState(state => {\n          return {\n            state: state.breaks = response.data\n          };\n        });\n      }\n\n      this.setLoading(false);\n    }).catch(err => {\n      this.setLoading(false);\n    });\n  }\n\n  reFetchData() {\n    this.setLoading(true);\n    const client = new httpClient();\n    return client.post(`${config.aws.api.url}${config.aws.api.path}`, this.state.breaks, {\n      'x-api-key': config.aws.api.key\n    }).then(response => {\n      if (response.data && response.status === 200) {\n        this.setState(state => {\n          return {\n            state: state.breaks = response.data\n          };\n        });\n      }\n\n      this.setLoading(false);\n    }).catch(err => {\n      this.setLoading(false);\n    });\n  }\n\n  updateRating(value, brId, demoName) {\n    const breaks = this.state.breaks;\n    breaks.map(p => p.Id === brId ? p.Ratings.map(d => d.DemoName === demoName ? d.Score = value : d) : p);\n    this.setState({\n      breaks: breaks\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, \"Break Id\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 61\n      }\n    }, \"Commercial Demographic\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 115\n      }\n    }, \"Rating\")), this.state.breaks && this.state.breaks.map((br, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    }, br.Id), /*#__PURE__*/React.createElement(\"div\", {\n      key: i + 1,\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, br.Ratings.map((rating, j) => /*#__PURE__*/React.createElement(\"div\", {\n      key: j,\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, rating.DemoName))), /*#__PURE__*/React.createElement(\"div\", {\n      key: i + 2,\n      className: \"col-md-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, br.Ratings.map((rating, k) => /*#__PURE__*/React.createElement(\"input\", {\n      key: k + 1,\n      type: \"text\",\n      onChange: e => this.updateRating(e.target.value, br.Id, rating.DemoName),\n      className: \"col-md-12\",\n      defaultValue: rating.Score,\n      placeholder: rating.Score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 34\n      }\n    })))))), this.state.isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      isLoading: this.state.isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }) : /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      onClick: this.reFetchData,\n      value: \"optimize\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 23\n      }\n    }));\n  }\n\n}\n\n;\nexport default Home;","map":{"version":3,"sources":["C:/gitrepos/optimizer/app/src/components/Home.jsx"],"names":["React","httpClient","Spinner","config","require","Home","Component","constructor","props","state","isLoading","breaks","ensureDataFetched","bind","refetchData","setLoading","setState","componentDidMount","client","get","aws","api","url","path","key","then","response","data","status","catch","err","reFetchData","post","updateRating","value","brId","demoName","map","p","Id","Ratings","d","DemoName","Score","render","br","i","rating","j","k","e","target"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport '../index.css';\r\nimport httpClient from '../httpClient';\r\nimport Spinner from './Spinner';\r\nconst config = require('../config.json');\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            breaks: null\r\n        }\r\n\r\n        this.ensureDataFetched = this.ensureDataFetched.bind(this);\r\n        this.refetchData = this.ensureDataFetched.bind(this);\r\n        this.setLoading = this.setLoading.bind(this);\r\n    }\r\n\r\n\r\n    setLoading(isLoading) {\r\n        this.setState({ isLoading });\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.ensureDataFetched();\r\n    }\r\n\r\n    ensureDataFetched() {\r\n        this.setLoading(true);\r\n        const client = new httpClient();\r\n        return client.get(`${config.aws.api.url}${config.aws.api.path}`, { 'x-api-key': config.aws.api.key })\r\n            .then(response => {\r\n                if (response.data && response.status === 200) {\r\n                    this.setState((state) => {\r\n                        return { state: state.breaks = response.data };\r\n                    });\r\n                }\r\n                this.setLoading(false);\r\n            })\r\n            .catch((err) => { this.setLoading(false); });\r\n    }\r\n\r\n    reFetchData() {\r\n        this.setLoading(true);\r\n        const client = new httpClient();\r\n        return client.post(`${config.aws.api.url}${config.aws.api.path}`, this.state.breaks, { 'x-api-key': config.aws.api.key })\r\n            .then(response => {\r\n                if (response.data && response.status === 200) {\r\n                    this.setState((state) => {\r\n                        return { state: state.breaks = response.data };\r\n                    });\r\n                }\r\n                this.setLoading(false);\r\n            })\r\n            .catch((err) => { this.setLoading(false); });\r\n    }\r\n\r\n    updateRating(value, brId, demoName) {\r\n        const breaks = this.state.breaks;\r\n        breaks.map(p => p.Id === brId ? p.Ratings.map(d => d.DemoName === demoName ?  d.Score = value  : d) : p);\r\n        this.setState({breaks:breaks});\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">Break Id</div><div className=\"col-md-6\">Commercial Demographic</div><div className=\"col-md-2\">Rating</div>\r\n                </div>\r\n                {this.state.breaks && this.state.breaks.map((br, i) =>\r\n\r\n                    <div key={i}>\r\n                        <div className=\"row\">\r\n                            <div key={i} className=\"col-md-4\" >{br.Id}</div>\r\n\r\n                            <div key={i+1} className=\"col-md-6\">\r\n                                {br.Ratings.map((rating, j) =>\r\n                                    <div key={j} className=\"col-md-12\">{rating.DemoName}</div>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div key={i+2} className=\"col-md-2\">\r\n                                {br.Ratings.map((rating, k)=>\r\n                                 <input key={k+1} type=\"text\" onChange={(e) => this.updateRating(e.target.value, br.Id, rating.DemoName)} className=\"col-md-12\" defaultValue={rating.Score} placeholder={rating.Score} />\r\n                                )}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                )}\r\n\r\n\r\n\r\n                {this.state.isLoading\r\n                    ? <Spinner isLoading={this.state.isLoading} />\r\n                    : <input type=\"button\" onClick={this.reFetchData} value=\"optimize\"></input>}\r\n            </React.Fragment>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}