{"ast":null,"code":"var _jsxFileName = \"C:\\\\gitrepos\\\\optimizer\\\\app\\\\src\\\\components\\\\Home.jsx\";\nimport * as React from 'react';\nimport '../index.css';\nimport httpClient from '../httpClient';\nimport Spinner from './Spinner';\n\nconst config = require('../config.json');\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      data: null\n    };\n    this.ensureDataFetched = this.ensureDataFetched.bind(this);\n    this.setLoading = this.setLoading.bind(this);\n  }\n\n  setLoading(isLoading) {\n    this.setState({\n      isLoading\n    });\n  }\n\n  componentDidMount() {}\n\n  ensureDataFetched() {\n    this.setLoading(true);\n    const client = new httpClient();\n    return client.get(`${config.aws.api.url}${config.aws.api.path}`, {\n      'x-api-key': config.aws.api.key\n    }).then(response => {\n      const data = JSON.parse(response.data.body);\n\n      if (data && response.data && response.status === 200) {\n        this.setState(state => {\n          return {\n            state: state.data = data\n          };\n        });\n      }\n\n      this.setLoading(false);\n    }).catch(err => {\n      this.setLoading(false);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, this.state.breaks.map((br, i) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }\n    })), this.state.isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      isLoading: this.state.isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }\n    }) : /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      onClick: this.ensureDataFetched,\n      value: \"get data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 20\n      }\n    }));\n  }\n\n}\n\n;\nexport default Home;","map":{"version":3,"sources":["C:/gitrepos/optimizer/app/src/components/Home.jsx"],"names":["React","httpClient","Spinner","config","require","Home","Component","constructor","props","state","isLoading","data","ensureDataFetched","bind","setLoading","setState","componentDidMount","client","get","aws","api","url","path","key","then","response","JSON","parse","body","status","catch","err","render","breaks","map","br","i"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,cAAP;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AAGA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,KADF;AAETC,MAAAA,IAAI,EAAE;AAFG,KAAb;AAKA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAGAC,EAAAA,UAAU,CAAEJ,SAAF,EAAY;AACnB,SAAKK,QAAL,CAAc;AAAEL,MAAAA;AAAF,KAAd;AACH;;AAIDM,EAAAA,iBAAiB,GAAG,CACnB;;AAEDJ,EAAAA,iBAAiB,GAAG;AAEpB,SAAKE,UAAL,CAAgB,IAAhB;AAEI,UAAMG,MAAM,GAAG,IAAIhB,UAAJ,EAAf;AACA,WAAOgB,MAAM,CAACC,GAAP,CAAY,GAAEf,MAAM,CAACgB,GAAP,CAAWC,GAAX,CAAeC,GAAI,GAAElB,MAAM,CAACgB,GAAP,CAAWC,GAAX,CAAeE,IAAK,EAAvD,EAA0D;AAAE,mBAAanB,MAAM,CAACgB,GAAP,CAAWC,GAAX,CAAeG;AAA9B,KAA1D,EACFC,IADE,CACGC,QAAQ,IAAI;AACd,YAAMd,IAAI,GAAGe,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACd,IAAT,CAAciB,IAAzB,CAAb;;AAEA,UAAIjB,IAAI,IAAIc,QAAQ,CAACd,IAAjB,IAAyBc,QAAQ,CAACI,MAAT,KAAoB,GAAjD,EAAsD;AAElD,aAAKd,QAAL,CAAeN,KAAD,IAAW;AACrB,iBAAO;AAAEA,YAAAA,KAAK,EAAEA,KAAK,CAACE,IAAN,GAAaA;AAAtB,WAAP;AACH,SAFD;AAGH;;AACD,WAAKG,UAAL,CAAgB,KAAhB;AACH,KAXE,EAWAgB,KAXA,CAWOC,GAAD,IAAS;AAAC,WAAKjB,UAAL,CAAgB,KAAhB;AAAwB,KAXxC,CAAP;AAYH;;AAEDkB,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,KAAKvB,KAAL,CAAWwB,MAAX,CAAkBC,GAAlB,CAAsB,CAACC,EAAD,EAAKC,CAAL,kBACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,CAFF,EASK,KAAK3B,KAAL,CAAWC,SAAX,gBACE,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWC,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,gBAEE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAE,KAAKE,iBAAnC;AAAsD,MAAA,KAAK,EAAC,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXP,CADJ;AAeH;;AAzD8B;;AA0DlC;AAED,eAAeP,IAAf","sourcesContent":["import * as React from 'react';\r\nimport '../index.css';\r\nimport httpClient from '../httpClient';\r\nimport Spinner from './Spinner';\r\nconst config = require('../config.json');\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            data: null\r\n        }\r\n        \r\n        this.ensureDataFetched = this.ensureDataFetched.bind(this);\r\n        this.setLoading = this.setLoading.bind(this);\r\n    }\r\n\r\n\r\n     setLoading (isLoading){\r\n        this.setState({ isLoading });\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    ensureDataFetched() {\r\n\r\n    this.setLoading(true);\r\n\r\n        const client = new httpClient();\r\n        return client.get(`${config.aws.api.url}${config.aws.api.path}`, { 'x-api-key': config.aws.api.key })\r\n            .then(response => {\r\n                const data = JSON.parse(response.data.body);\r\n\r\n                if (data && response.data && response.status === 200) {\r\n\r\n                    this.setState((state) => {\r\n                        return { state: state.data = data };\r\n                    });\r\n                }\r\n                this.setLoading(false);\r\n            }).catch((err) => {this.setLoading(false);});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n             {this.state.breaks.map((br, i)=> \r\n             <div>{}</div>\r\n\r\n             )}\r\n\r\n\r\n\r\n                {this.state.isLoading \r\n                ?  <Spinner isLoading={this.state.isLoading} />\r\n                :  <input type=\"button\" onClick={this.ensureDataFetched} value=\"get data\"></input>}\r\n            </React.Fragment>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}