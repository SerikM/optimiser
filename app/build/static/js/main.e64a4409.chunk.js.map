{"version":3,"sources":["components/NavMenu.jsx","components/Layout.jsx","httpClient.js","components/Spinner.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","state","Navbar","className","dark","Container","NavbarBrand","tag","Link","to","React","children","httpClient","handleServerError","err","Promise","reject","url","request","headers","axios","post","catch","get","put","delete","data","method","withCredentials","Spinner","isLoading","id","config","require","Home","breaks","breaksWithCommercials","total","errors","ensureDataFetched","bind","refetchData","setLoading","this","setState","then","aws","api","path","key","response","status","target","brId","demoName","elId","current","value","number","parseInt","length","isNaN","test","style","borderColor","map","p","Id","Ratings","d","DemoName","Score","br","i","rating","j","type","disabled","inputMode","onChange","e","updateRating","defaultValue","Commercials","comm","k","TargetDemoName","CommercialTypeName","App","Layout","exact","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.e64a4409.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Container, Navbar, NavbarBrand } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport '../index.css';\r\n\r\n\r\nclass NavMenu extends React.PureComponent {\r\n    constructor(props) \r\n    {\r\n        super(props);\r\n        this.state = \r\n        { }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" dark>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">Commercial Optimiser</NavbarBrand>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavMenu;","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavMenu from './NavMenu';\r\nimport '../index.css';\r\n\r\nexport default (props ) => (\r\n    <React.Fragment>\r\n        <NavMenu />\r\n        <Container>\r\n            {props.children}\r\n        </Container>\r\n    </React.Fragment>\r\n);","import axios from 'axios';\r\n\r\nclass httpClient {\r\n  \r\n  handleServerError = err => {\r\n    return Promise.reject(err);\r\n  };\r\n\r\n  post(url, request, headers) {\r\n    return axios.post(url, request, { headers: headers }).catch(err =>\r\n      this.handleServerError(err)\r\n    );\r\n  }\r\n\r\n  get(url, headers) {\r\n    return axios.get(url, { headers: headers }).catch(err =>\r\n      this.handleServerError(err)\r\n    );\r\n  }\r\n\r\n  put(url, request, headers) {\r\n    return axios.put(url, request, { headers: headers }).catch(err =>\r\n      this.handleServerError(err)\r\n    );\r\n  }\r\n\r\n  remove(url, headers) {\r\n    return axios.delete(url, { headers: headers }).catch(err =>\r\n      this.handleServerError(err)\r\n    );\r\n  }\r\n\r\n  dataFetcher(url, data) {\r\n    return axios({\r\n      url,\r\n      method: data ? 'POST' : 'GET',\r\n      data,\r\n      withCredentials: true\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default httpClient;\r\n","import React from \"react\";\r\n\r\nconst Spinner = ({ isLoading }) => {\r\n  if (isLoading) {\r\n    return (\r\n      <div id=\"loader\" className=\"loader\">\r\n        <div className=\"loader-content\">\r\n         \r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div />;\r\n  }\r\n};\r\n\r\nexport default Spinner;\r\n","import * as React from 'react';\r\nimport '../index.css';\r\nimport httpClient from '../httpClient';\r\nimport Spinner from './Spinner';\r\nconst config = require('../config.json');\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            breaks: null,\r\n            breaksWithCommercials: null,\r\n            total: 0,\r\n            errors: false\r\n        }\r\n\r\n        this.ensureDataFetched = this.ensureDataFetched.bind(this);\r\n        this.refetchData = this.refetchData.bind(this);\r\n        this.setLoading = this.setLoading.bind(this);\r\n    }\r\n\r\n\r\n    setLoading(isLoading) {\r\n        this.setState({ isLoading });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ensureDataFetched()\r\n            .then(() => {\r\n                this.refetchData();\r\n            });\r\n    }\r\n\r\n    ensureDataFetched() {\r\n        this.setLoading(true);\r\n        const client = new httpClient();\r\n        return client.get(`${config.aws.api.url}${config.aws.api.path}`, { 'x-api-key': config.aws.api.key })\r\n            .then(response => {\r\n                if (response.data && response.status === 200) {\r\n                    this.setState((state) => {\r\n                        return { state: state.breaks = response.data };\r\n                    });\r\n                }\r\n                this.setLoading(false);\r\n            })\r\n            .catch((err) => { this.setLoading(false); });\r\n    }\r\n\r\n    refetchData() {\r\n        this.setLoading(true);\r\n        const client = new httpClient();\r\n        return client.post(`${config.aws.api.url}${config.aws.api.path}`, this.state.breaks, { 'x-api-key': config.aws.api.key })\r\n            .then(response => {\r\n                if (response.data && response.status === 200) {\r\n                    this.setState((state) => {\r\n                        return { state: state.breaksWithCommercials = response.data.breaksWithCommercials, total: response.data.total };\r\n                    });\r\n                }\r\n                this.setLoading(false);\r\n            })\r\n            .catch((err) => { this.setLoading(false); });\r\n    }\r\n\r\n    updateRating(target, brId, demoName, elId) {\r\n        this.setState({ current: elId });\r\n        let value = target.value;\r\n        const number = parseInt(value, 10);\r\n        if (value.length > 6 || isNaN(number) || ! /^\\d+$/.test(value)) {\r\n            target.style.borderColor = \"red\";\r\n            this.setState({ errors: true });\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({ errors: false });\r\n            target.style.borderColor = \"\";\r\n        }\r\n\r\n        const breaks = this.state.breaks;\r\n        breaks.map(p => p.Id === brId ? p.Ratings.map(d => d.DemoName === demoName ? d.Score = number : d) : p);\r\n        this.setState((state) => {\r\n            return { state: state.breaks = breaks };\r\n        });\r\n        this.refetchData();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div className=\"total\">\r\n                    {this.state.isLoading ? <Spinner isLoading={this.state.isLoading} /> :\r\n                        this.state.total > 0 && <h2>{this.state.total}</h2>\r\n                    }\r\n                </div>\r\n                <hr></hr>\r\n                <div className=\"main\">\r\n                    <div className=\"row row-header\">\r\n                        <div className=\"col-2\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">Break</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-10\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-7 col-md-8\">Demographic</div>\r\n                                <div className=\"col-5 col-md-4\">Rating</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {this.state.breaks && this.state.breaks.map((br, i) =>\r\n                        <div key={i} className=\"row align-items-center\">\r\n                            <div className=\"col-2\">\r\n                                <div className=\"row\">\r\n                                    <div key={i + 1} className=\"col-12\" >{br.Id}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-10\">\r\n                                <div className=\"row\">\r\n                                    {br.Ratings && br.Ratings.map((rating, j) =>\r\n                                        <React.Fragment key={j + 5}>\r\n                                            <div key={j + 1} className=\"col-7 col-md-8\">\r\n                                                <span key={j + 2}></span>  {rating.DemoName}\r\n                                            </div>\r\n\r\n                                            <div key={j + 3} className=\"col-5 col-md-4\">\r\n                                                <input key={`${i}${j}`} type=\"number\" disabled={this.state.errors && this.state.current !== `${i}${j}`} inputMode=\"numeric\" onChange={(e) => this.updateRating(e.target, br.Id, rating.DemoName, `${i}${j}`)} defaultValue={rating.Score} />\r\n                                            </div>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"main lower\">\r\n                    <React.Fragment>\r\n                        <div className=\"row row-header\">\r\n\r\n                            <div className=\"col-2\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">Break</div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-10\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-4\">Commercial</div>\r\n                                    <div className=\"col-4\">Demographic</div>\r\n                                    <div className=\"col-4\">Type</div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        {this.state.breaksWithCommercials && this.state.breaksWithCommercials.map((br, i) =>\r\n                            <div key={i} className=\"row align-items-center\">\r\n                                <div className=\"col-2\">\r\n                                    <div className=\"row\">\r\n                                        <div key={i + 'a'} className=\"col-12\" >{br.Id}</div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-10\">\r\n                                    <div className=\"row\">\r\n                                        {br.Commercials && br.Commercials.map((comm, k) =>\r\n                                            <React.Fragment key={k + 'e'}>\r\n                                                <div key={k + 'b'} className=\"col-4\">\r\n                                                    {this.state.isLoading ? <Spinner isLoading={this.state.isLoading} /> :\r\n                                                        comm.Id\r\n                                                    }\r\n                                                </div>\r\n                                                <div key={k + 'c'} className=\"col-4\">\r\n                                                    {this.state.isLoading ? <Spinner isLoading={this.state.isLoading} /> :\r\n                                                        comm.TargetDemoName\r\n                                                    }\r\n                                                </div>\r\n                                                <div key={k + 'd'} className=\"col-4\">\r\n                                                    {this.state.isLoading ? <Spinner isLoading={this.state.isLoading} /> :\r\n                                                        comm.CommercialTypeName\r\n                                                    }\r\n                                                </div>\r\n                                            </React.Fragment>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </React.Fragment>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n};\r\nexport default Home;","import React from 'react';\nimport { Route } from 'react-router';\nimport Layout from './components/Layout';\nimport Home from './components/Home';\nimport './index.css';\n\nfunction App() {\n  return (\n    <Layout>\n      <Route exact path='/' component={Home} />\n    </Layout>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}